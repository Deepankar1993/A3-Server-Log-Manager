//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackendManager {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.7.0.0")]
    internal sealed partial class ServerInfo : global::System.Configuration.ApplicationSettingsBase {
        
        private static ServerInfo defaultInstance = ((ServerInfo)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new ServerInfo())));
        
        public static ServerInfo Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("127.0.0.1")]
        public string Backend_MS_IP {
            get {
                return ((string)(this["Backend_MS_IP"]));
            }
            set {
                this["Backend_MS_IP"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("8000")]
        public int Backend_MS_PORT {
            get {
                return ((int)(this["Backend_MS_PORT"]));
            }
            set {
                this["Backend_MS_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("127.0.0.1")]
        public string Backend_ZS_IP {
            get {
                return ((string)(this["Backend_ZS_IP"]));
            }
            set {
                this["Backend_ZS_IP"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("8001")]
        public int Backend_ZS_PORT {
            get {
                return ((int)(this["Backend_ZS_PORT"]));
            }
            set {
                this["Backend_ZS_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("127.0.0.1")]
        public string MainServer_IP {
            get {
                return ((string)(this["MainServer_IP"]));
            }
            set {
                this["MainServer_IP"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("7789")]
        public int MainServer_PORT {
            get {
                return ((int)(this["MainServer_PORT"]));
            }
            set {
                this["MainServer_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("127.0.0.1 ")]
        public string WSP_IP {
            get {
                return ((string)(this["WSP_IP"]));
            }
            set {
                this["WSP_IP"] = value;
            }
        }
    }
}
